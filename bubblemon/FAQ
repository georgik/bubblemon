1. How do I start the applet from the command line?

Change to the bubblemon directory and do the following:

$ ./configure
$ make
$ src/bubblemon_applet --activate-goad-server=bubblemon_applet


2. Performance sucks.  What should I do?

To give you some frame of reference of what kind of performance to
expect; on my 400MHz PII system I have never seen the bubblemon go
over 1.5% CPU utilization (according to 'top').

See the file PROFILING for instructions on finding out where your
cycles go.  Then, either fix it yourself and send me
(d92-jwa@nada.kth.se) a patch, or send me a bug report containing the
output of the commands recommended in PROFILING.

Note also that several users have reported a CPU utilization of over
30% for a system similar to mine.  In all of the cases, the profiling
said that only 0-2% of the CPU was used by my code.  This means that
cycles are disappearing outside of my code.

As I don't have these problems on any of the (two) systems I've tried
the applet on, this is very hard for me to track down.  So if you know
some C and want to help me find the problem, I will greatly appreciate
any help I can get!  I'm really stuck on this one, so please HELP!


3. The program doesn't do anything; it doesn't even crash!

Try running it from the command line, and see if you get an error
message.  Do the follwing from the bubblemon directory:

$ ./configure
$ make
$ src/bubblemon_applet --activate-goad-server=bubblemon_applet


4. Isn't the applet supposed to have a tooltip?  Where is it?

Yes it is and the code is there for it.  See the README file under the
TODO section for more info.


5. The program crashes.  What should I do?

Either fix it yourself and send me (d92-jwa@nada.kth.se) a patch, or
send me a bug report.  The bug report should contain the result of
changing directory into the bubblemon directory and doing the
following:

$ ./configure
$ make
$ cd src
$ gdb bubblemon_applet
(gdb) run --activate-goad-server=bubblemon_applet
<SEGFAULT>
(gdb) info stack


6. I'm running a background process on my system that should be using
  all of my CPU, but the Bubblemon shows very few or no bubbles at
  all.  Why is that?

Because the applet ignores nice (do 'man nice') processes.  The
reasoning behind this is that I use the applet for keeping track of
how much processing power I have at my disposal.  As 'nice' processes
will yield as soon as another process starts, I have all of my CPU
power at my disposal, even with a 'nice' background job running.
Therefore: 'nice' processes don't bubble.


7. The amount of memory used reported by the applet is different from
  what [other program] says.  How come?

Free memory measuring on Linux (at least) is somewhat complicated.
What my applet shows is what most people would think of as free
memory.  Therefore, what my applet reports may not correspond to what
other programs say, but the numbers you get from my applet is what you
really want.

A more precise explanation follows.  If it's wrong in some way, or if
you know somewhere else where this is documented in some
comprehensible way, I'd appreciate it if you send me a mail.

Anyway, if we forget about swap for a while, here are the different
kinds of memory, and whether I treat them as "air" or "water":

* Free memory.  Just what you'd expect.  This adds to the "air".
* Used memory.  Just what you'd expect.  This adds to the "water".
* Shared memory.  Memory shared between two or more processes.  This
 adds to the "water".
* Buffers and cache.  Free memory that Linux uses for disk cache.
 When someone allocates more memory, buffers and cache are nuked, so
 this adds to the "air".

If we add swap space into the picture, what I show as the water level
is how much memory is "air" (as defined above) relative to the total
amount of electronic memory.  What I show as color changes is how much
"air" memory above the amount of electronic memory is being used.
Thus, when Linux starts swapping stuff out even though there's
electronic memory left, people watching my meter won't be confused by
this (I know I was before I changed it :-).

If you want to know more than this, have a look at the
get_censored_memory_and_swap() function in bubblemon.c.


8. I have another question/problem.  What should I do?

E-mail me at d92-jwa@nada.kth.se and ask ahead.
